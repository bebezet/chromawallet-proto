// Your custom SCSS should be written here...
.testnet-message {
    color: rgb(255, 252, 0);
    position: absolute;
    bottom: -15px;
    left: 30px;
    font-family: courier;
    font-size: 14px;
    font-weight: 600;
}

.overview .row {
    border-bottom: 1px dashed;
}

.send fieldset {
    border-top: 1px dashed;
    margin-top: 10px; //TODO use mixin for size in px
}

.history-small table tbody td {
    border:0;
}
.history-small table tbody th {
    padding-left: 10px; //TODO use mixin for size in px
}

.history-small tbody {
    border: 1px solid #e5e5e5; //TODO Use mixin for color
}

.navbar li.active a {
    color: $chroma-orange; //Temp
}

.row {
    background-color: #fff;
}

.navbar {
    background-color: $chroma-dark-blue;
    margin-bottom: 0;
}
.navbar ul li > a {
    font-size: 1.5rem;
}

span.desktop {
    display: none;
}
span.non-desktop {
    display: inline;
}


@include respond(desktop) {
    .navbar {
        margin-top: 30px;
    }

    span.desktop {
        display: inline;
    }
    span.non-desktop {
        display: none;
    }
}

@include respond(desktop) {
    body {
        /* background-image: url(../img/starnetblog_subtile_gray_pattern5.jpg); */
        /* background-repeat: repeat; */
        background-color: #ddd;
    }
}

.navbar ul li > a {
    text-shadow: inherit;
}


.module-heading h2 {
    float: left;
}

.module-heading .right-button {
    float: right;
    margin-top: 15px;
}

.btn {
    margin: 1px;
}

.overview__address {
    overflow: hidden;
    text-overflow: ellipsis;
}


.history__address {
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
}


.receive__address-cell {
    max-width: 150px;
}
.receive__address {
    display: inline-block;
    max-width: 70%;
    overflow: hidden;
    text-overflow: ellipsis;
}

.copy-icon {
    cursor: pointer;
    opacity: 1;
    transition: opacity 300ms ease-in-out;
    -webkit-transition: opacity 300ms ease-in-out;
}

.copy-icon:hover {
    opacity: 0.6;
    background-color: $chroma-grey;
}


.overview__address-hash {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: inline-block;
    width: calc(100% - 30px);
}

.push-row-three {
    margin-top: 4.5em;
}

.push-row-one {
    margin-top: 1.5em;
}

.push-row-little {
    margin-top: 0.75em;
}

.push-row-bottom-one {
    margin-bottom: 1.5em;
}

.field textarea.passphrase-textarea {
    border: 1px solid black;
}



//http://blog.pamelafox.org/2012/05/triggering-numeric-keyboards-with-html5.html

input.numeric-input-no-spinner::-webkit-outer-spin-button,
input.numeric-input-no-spinner::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}


// Tweaks to get password fields with numeric keypad
// http://stackoverflow.com/questions/8333117/is-there-a-way-to-have-a-masked-numeric-input-field/

input[type=number].numeric-password {
    -webkit-text-security: disc;
}

//Platform tweaks //

.ios .row.header,
.ios .row.navbar  {
  padding-top: 10px;
}

//http://qnimate.com/making-a-phonegap-look-like-native-app/

*
{
-webkit-user-select: none;
-khtml-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-select: none;
}

input, .selectable
{
-webkit-user-select: auto !important;
-khtml-user-select: auto !important;
-moz-user-select: auto !important;
-ms-user-select: auto !important;
user-select: auto !important;
}

* {
-webkit-touch-callout: none;
-moz-touch-callout: none;
-ms-touch-callout: none;
touch-callout: none;
}

* {
-webkit-user-drag: none;
-moz-user-drag: none;
-ms-user-drag: none;
user-drag: none;
}

/* body { */
/* -webkit-touch-callout: none; */
/*   -webkit-user-select: none; */
/*    -khtml-user-select: none; */
/*      -moz-user-select: moz-none; */
/*       -ms-user-select: none; */
/*        -o-user-select: none; */
/*           user-select: none */
/* } */

/* .selectable { */
/* -webkit-touch-callout: default; */
/*   -webkit-user-select: text; */
/*    -khtml-user-select: text; */
/*      -moz-user-select: text; */
/*       -ms-user-select: text; */
/*        -o-user-select: text; */
/*           user-select: text; */
/* } */
